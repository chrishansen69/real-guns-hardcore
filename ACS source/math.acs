function int tan(int x)
{
  return FixedDiv(sin(x), cos(x));
}

function int sqrt(int number)
{
	if(number <= 3)
	{
		if(number > 0)
		{
			return 1;
		}
		return 0;
	}

	int oldAns = number >> 1,                     // initial guess
	    newAns = (oldAns + number / oldAns) >> 1; // first iteration

	// main iterative method
	while(newAns < oldAns)
	{
		oldAns = newAns;
		newAns = (oldAns + number / oldAns) >> 1;
	}

	return oldAns;
}

function int distanceFromPoint (int originX, int originY, int originZ, int tid2)
{
	int x, y, z, d;
	x = (originX - GetActorX(tid2)) >> 16; // Convert fixed point to integer
	y = (originY - GetActorY(tid2)) >> 16;
	z = (originZ - GetActorZ(tid2)) >> 16;
	d = sqrt( x*x + y*y + z*z );
	return d;
}

#define VECTOR_LENGTH(vector) sqrt(FixedMul(vector[0],vector[0]) + FixedMul(vector[1],vector[1]) + FixedMul(vector[2],vector[2]))

int vectorLength;
#define NORMALIZE_VECTOR(vector) vectorLength = VECTOR_LENGTH(vector);\
	vector[0] = FixedDiv(vector[0], vectorLength);\
	vector[1] = FixedDiv(vector[1], vectorLength);\
	vector[2] = FixedDiv(vector[2], vectorLength);  

#define VECTOR_CROSS_PRODUCT(a, b, c)\
	c[0] = FixedMul(a[1], b[2]) + FixedMul(a[2], b[1]);\
	c[1] = FixedMul(a[2], b[0]) + FixedMul(a[0], b[2]);\
	c[2] = FixedMul(a[0], b[1]) + FixedMul(a[1], b[0]);

function void hudmessageonactor(int tid, int range, str sprite, str text, int spriteWidth, int spriteHeight)
{
	int dist, ang, vang, pitch, x, y;
	int HUDX = 1400;
	int HUDY = 800;
	int offset = 0;
    
	if(sprite != -1)
	{
		setfont(sprite);
		text = "A";
		offset = 0.1;
	}

	sethudsize(HUDX, HUDY, 1);
	x = getactorx(tid) - getactorx(0);
	y = getactory(tid) - getactory(0); 

	vang = vectorangle(x,y);
	ang = (vang - GetActorAngle(0) + 1.0) % 1.0;

	//if(((vang+0.125)%0.5) > 0.25) dist = fixeddiv(y, sin(vang));
	//else dist = distanceFromPoint(getactorx(0), getactory(0), getactorz(0),tid);

    dist = distanceFromPoint(getactorx(0), getactory(0), getactorz(0),tid) << 16;

	int distRatio = fixeddiv(dist, range >> 16);
	
	HUDX = HUDX * (dist >> 16) / (range >> 16);
	HUDY = HUDY * (dist >> 16) / (range >> 16);   
	
	sethudsize(HUDX, HUDY, 1);

	if ((ang < 0.2 || ang > 0.8) && dist < range)
	{
		pitch = vectorangle(dist, getactorz(tid) - (getactorz(0) + 41.0));
		pitch = (pitch + GetActorPitch(0) + 1.0) % 1.0;

		x = HUDX/2 - ((HUDX/2) * sin(ang) / cos(ang));
		y = HUDY/2 - ((HUDX/2) * sin(pitch) / cos(pitch));

		hudmessage(s:text; HUDMSG_PLAIN, 20000+ tid, CR_UNTRANSLATED, (x<<16)+offset - ((spriteWidth / 2)<<16), (y<<16)+offset - (spriteHeight<<16), 0);
	}
	else
		hudmessage(s:" "; HUDMSG_PLAIN, 20000+ tid, CR_UNTRANSLATED, 0, 0, 0);
}
