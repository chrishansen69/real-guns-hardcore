function bool is4to3(void){
	int w = GetScreenWidth();
	int h = GetScreenHeight();
	
	if(
		(w == 320 &&  h == 240) ||
		(w == 400 &&  h == 300) ||
		(w == 512 &&  h == 384) ||
		(w == 576 &&  h == 432) ||
		(w == 640 &&  h == 480) ||
	    (w == 800 &&  h == 600) ||
	    (w == 1024 &&  h == 768) ||
	    (w == 1152 &&  h == 1280) ||
	    (w == 1280 &&  h == 960) ||
	    (w == 1400 &&  h == 1050)
	){
		return true;
	}	
	return false;	
}

function bool is5to4(void){
	int w = GetScreenWidth();
	int h = GetScreenHeight();
	
	if(
		(w == 320 &&  h == 256) ||
		(w == 360 &&  h == 288) ||		
		(w == 720 &&  h == 576) ||
	    (w == 1280 &&  h == 1024)
	){
		return true;
	}	
	return false;	
}

function bool is16to9(void){
	int w = GetScreenWidth();
	int h = GetScreenHeight();
	
	if(                    
		(w == 1280 &&  h == 720) ||
	    (w == 1024 &&  h == 576) ||
	    (w == 1600 &&  h == 900) ||
	    (w == 640 &&  h == 360) ||
	    (w == 800 &&  h == 450) ||
	    (w == 848 &&  h == 480) ||
	    (w == 1024 &&  h == 576) ||
	    (w == 1152 &&  h == 648) ||
	    (w == 1280 &&  h == 720) ||
	    (w == 1400 &&  h == 787) ||
	    (w == 1769 &&  h == 992) ||
	    (w == 1920 &&  h == 1080)
	){
		return true;
	}	
	return false;	
}

function bool is16to10(void){
	int w = GetScreenWidth();
	int h = GetScreenHeight();
	
	if(
		(w == 360 &&  h == 240) ||
		(w == 400 &&  h == 256) ||
		(w == 720 &&  h == 480) ||
	    (w == 1600 &&  h == 1024) ||
	    (w == 1680 &&  h == 1050) ||
	    (w == 1280 &&  h == 800) ||
	    (w == 800 &&  h == 500) ||
	    (w == 1024 &&  h == 640) ||
	    (w == 1152 &&  h == 720) ||
	    (w == 1280 &&  h == 1280) ||
	    (w == 1400 &&  h == 875) ||
	    (w == 1920 && h == 1200)
	){
		return true;
	}	
	return false;	
}

function void drawStretchedImage(int id, int imageWidth, int imageHeight, int time, int fadeTime){
	int hudScreenWidth = imageHeight * 4 / 3 * imageWidth / imageHeight;
	int hudScreenHeight = imageHeight;
	
	if(is4to3()){							
		hudScreenWidth = hudScreenWidth / 4 * 3;
	}
	else if(is5to4()){
		hudScreenWidth = hudScreenWidth / 4 * 3;
		hudScreenHeight = 750; // I was too lazy to design the formula for just one res :)
	}
	else if(is16to9()){
		hudScreenWidth = hudScreenWidth / 16 * 9;
	}
	else if(is16to10()){							
		hudScreenWidth = hudScreenWidth / 16 * 10;
	}
	else {
		hudScreenWidth = 1280;
		log(s:"unknown resolution - please choose a valid resoltion from the SET VIDEO MODE menu");
	}
	
	//log(i:hudScreenWidth)

	SetHudSize(hudScreenWidth,hudScreenHeight,1);
	HudMessage(s:"a"; HUDMSG_FADEOUT, id, CR_UNTRANSLATED, (hudScreenWidth/ 2)* 65536, (hudScreenHeight/ 2)* 65536, time, fadeTime);
}

function int getHorizontalFov(void){
	return 90.0;
}

function int getVerticalFov(void){
	return 60.0;
}

int inputVector[3] = {0, 0, 0};
int outputVector[3] = {0, 0, 0};

int upVector[3] = {0, 1.0, 0};
int basisA[3] = {0, 0, 0};
int basisB[3] = {0, 0, 0};
int basisBCopy[3] = {0, 0, 0};
int basisC[3] = {0, 0, 0};
int point[3] = {0, 0, 0};
int eyeCoords[3] = {0, 0, 0};
int normCoords[3] = {0, 0, 0};
int screenCoords[2] = {0, 0};

function void worldToScreenCoords(void){
	// Camera vector
	
  // KUWA TOHLE NENI SPRAVNE
  /*
  int cameraTargetX =  cos(GetActorAngle(0));
	int cameraTargetY = -sin(GetActorPitch(0));    
	int cameraTargetZ = sin(GetActorAngle(0));*/  
	
	int cameraTargetX = FixedMul(cos(GetActorAngle(0)), FixedMul(cos(GetActorPitch(0)), 1.0)); 
	int cameraTargetY = -sin(GetActorPitch(0));      
	int cameraTargetZ = FixedMul(sin(GetActorAngle(0)), cos(GetActorPitch(0))); 
	    
	//  log(s: "CAM X ", f:cameraTargetX);
  //log(s: "CAM Y ", f:cameraTargetY);
	//log(s: "CAM Z ", f:cameraTargetZ);
	
	
	//log(s: "X", f:cameraTargetX);
	//log(s: "Y", f:cameraTargetY);
	//log(s: "Z", f:cameraTargetZ);
	
	basisB[0] = cameraTargetX;// - GetActorX(0);
	basisB[1] = cameraTargetY;// - GetActorZ(0);
	basisB[2] = cameraTargetZ;// - GetActorY(0); 
	
	NORMALIZE_VECTOR(basisB);
	
	/*basisBCopy[0] = basisB[2];
	basisBCopy[1] = basisB[1];
	basisBCopy[2] = basisB[0];
	
	VECTOR_CROSS_PRODUCT(basisBCopy, basisB, upVector);
	
	NORMALIZE_VECTOR(upVector);*/

	/*  log(s: "UP X ", f:upVector[0]);
  log(s: "UP Y ", f:upVector[1]);
	log(s: "UP Z ", f:upVector[2]);*/
	
	//log(s: "X ", f:basisB[0]);
  //log(s: "Y ", f:basisB[1]);
	//log(s: "Z ", f:basisB[2]);
	
	VECTOR_CROSS_PRODUCT(upVector, basisB, basisA);
	
	NORMALIZE_VECTOR(basisA);
	
	VECTOR_CROSS_PRODUCT(basisB, basisA, basisC);
	
	NORMALIZE_VECTOR(basisC);
	
	// Point coordinate relative to camera
	point[0] = inputVector[0] - GetActorX(0); 
	point[1] = inputVector[1] + 10.0 - GetActorZ(0) - 48.0; // height of the player actor 
	point[2] = inputVector[2] - GetActorY(0);

  //log(s: "REL X ", f:point[0]);
  //log(s: "REL Y ", f:point[1]);
	//log(s: "REL Z ", f:point[2]);

  // transform the world coordinates to eye coordinates
  eyeCoords[0] = FixedMul(point[0], basisA[0]) + FixedMul(point[1], basisA[1]) + FixedMul(point[2], basisA[2]);
  eyeCoords[1] = FixedMul(point[0], basisB[0]) + FixedMul(point[1], basisB[1]) + FixedMul(point[2], basisB[2]);
  eyeCoords[2] = FixedMul(point[0], basisC[0]) + FixedMul(point[1], basisC[1]) + FixedMul(point[2], basisC[2]);

  //log(s: "X ", f:eyeCoords[0]);
  //log(s: "Y ", f:eyeCoords[1]);
	//log(s: "Z ", f:eyeCoords[2]);

  // transform eye coordinates to normalized coordinates for perspective view
  int tanThetaHorizontal = tan(FixedDiv(FixedDiv(getHorizontalFov(), 360.0), 2.0));
	int tanThetaVertical = tan(FixedDiv(FixedDiv(getVerticalFov(), 360.0), 2.0));

    	//log(s: "H", f:tan(FixedDiv(FixedDiv(getHorizontalFov(), 360.0), 2.0)));
  //log(s: "V", f:tan(FixedDiv(FixedDiv(getVerticalFov(), 360.0), 2.0)));

  int zoom = 1.0; 
  int d = FixedDiv(zoom, eyeCoords[1]);
  normCoords[0] = FixedDiv(FixedMul(d, eyeCoords[0]), tanThetaHorizontal);
  normCoords[1] = eyeCoords[1];
  normCoords[2] = FixedDiv(FixedMul(d, eyeCoords[2]), tanThetaVertical);

  if(
    normCoords[0] < -1.0 ||
    normCoords[0] > 1.0 ||
    normCoords[2] < -1.0 ||
    normCoords[2] > 1.0 ||
    normCoords[1] < -0
  )
  {
    screenCoords[0] = -1;
    return;
  }

  //log(s: "X", f:normCoords[0]);
  //log(s: "Y", f:normCoords[1]);
	//log(s: "Z", f:normCoords[2]);
  
  //log(s:"========");
  //log(s: "W ", f:(GetScreenWidth() / 2) << 16);
  //log(s: "H ", f:(GetScreenHeight() / 2) << 16);    
  //log(s: "X ", f:FixedDiv(FixedMul(GetScreenWidth() << 16, normCoords[0]), 2.0));
  //log(s: "Y ", f:FixedDiv(FixedMul(GetScreenHeight() << 16, normCoords[2]), 2.0));
  
  //print(s:"X ", f:normCoords[0], s:" PITCH ", f:normCoords[2]);
  
  // transform normalized coordinates to screen coordinates
  
  screenCoords[0] = 1;
  
  	//log(s: "X", f:screenCoords[0]);
  //log(s: "Y", f:screenCoords[1]);
	//log(s: "Z", f:point[2]);   
}

// kill indicator
function void drawKillIndicator(void) {
	if(CheckInventory("PowerEMP") > 0) return;
	
	SetFont("KILINDIC");
	SetHudSize(800,600,1);
	HudMessage(s:"a"; HUDMSG_FADEOUT, CR_UNTRANSLATED, 0, 400.0, 300.0, 0.25, 0.01);
}

// Called from KillIndicator inventory item
script 653 (void) CLIENTSIDE {	
	drawKillIndicator();
}

// draws "hold X to change class" (according to client's key settings)
script 654 DEATH CLIENTSIDE
{
	if(COMPETITIVE){
		SetFont("BIGFONT");		
		HudMessage(s:"\ccHold \cf", k:"+altattack", s:"\cc while respawning to change your class"; HUDMSG_PLAIN, 2700+PlayerNumber(), CR_Green, 0.5, 0.75, 0);
	}
}

function void hudmessageonactor(int tid, int range, str sprite, str text, int spriteWidth, int spriteHeight)
{
	int dist, ang, vang, pitch, x, y;
	int HUDX = 1750;
	int HUDY = HUDX * 3 / 4;
	int offset = 0;
    
	if(sprite != -1)
	{
		setfont(sprite);
		text = "A";
		offset = 0.1;
	}

	sethudsize(HUDX, HUDY, 0);
	//x = getactorx(tid) - getactorx(0);
	y = getactory(tid) - getactory(0); 

	//vang = vectorangle(x,y);
	//ang = (vang - GetActorAngle(0) + 1.0) % 1.0;

	//if(((vang+0.125)%0.5) > 0.25) dist = fixeddiv(y, sin(vang));
	//else dist = distanceFromPoint(getactorx(0), getactory(0), getactorz(0),tid);

    dist = distanceFromPoint(getactorx(0), getactory(0), getactorz(0),tid) << 16;

	int distRatio = fixeddiv(dist, range >> 16);
	
	HUDX = HUDX * (dist >> 16) / 1000;
	HUDY = HUDY * (dist >> 16) / 1000;   
	
	sethudsize(HUDX, HUDY, 0);

	if (/*(ang < 0.2 || ang > 0.8) && */dist < range){
	//{
	//	pitch = vectorangle(dist, getactorz(tid) - (getactorz(0) + 41.0));
	//	pitch = (pitch + GetActorPitch(0) + 1.0) % 1.0;

	//	x = HUDX/2 - ((HUDX/2) * sin(ang) / cos(ang));
	//	y = HUDY/2 - ((HUDX/2) * sin(pitch) / cos(pitch));

    inputVector[0] = GetActorX(tid);
    inputVector[1] = GetActorZ(tid);
    inputVector[2] = GetActorY(tid);

    worldToScreenCoords();
    
    if(
      screenCoords[0] != -1
    ){

      screenCoords[0] = ((HUDX / 2) << 16) + FixedDiv(FixedMul(HUDX << 16, normCoords[0]), 2.0) ;
      screenCoords[1] = ((HUDY / 2) << 16) - FixedDiv(FixedMul(HUDY << 16, normCoords[2]), 2.0);

		  hudmessage(s:text; HUDMSG_PLAIN, 20000+ tid, CR_UNTRANSLATED, (screenCoords[0] >> 16) << 16, ((screenCoords[1] >> 16) << 16) + 0.2, 0);
		}
		else {
      hudmessage(s:""; HUDMSG_PLAIN, 20000+ tid, CR_UNTRANSLATED, 0, 0, 0);
    }
    
    }
    else {
      hudmessage(s:""; HUDMSG_PLAIN, 20000+ tid, CR_UNTRANSLATED, 0, 0, 0);
    }
	//}
	//else
	//	hudmessage(s:" "; HUDMSG_PLAIN, 20000+ tid, CR_UNTRANSLATED, 0, 0, 0);
}


// hud loop
script 650 (void) CLIENTSIDE {
	// Bot? -> No need for hud loop
	if(ClassifyActor(0) & ACTOR_BOT){
		terminate;
	}

	int loopCounter = 0;
	int noiseCounter = 0;

	while(true){
		if(CheckInventory("NoHudLoop") > 0){
		    terminate;
		}
			
		loopCounter++;
		noiseCounter = noiseCounter + random(0,2);
		
		if(loopCounter == 1000000) loopCounter = 0;
		if(noiseCounter >= 1000000) noiseCounter = 0; 
		
		if(CheckInventory("Menu") == 1){
			delay(10);
			continue;
		}
		
					if(loopCounter % 10 == 0){
        
      } 
			
		if(
			CheckInventory("Crosshair") > 0 &&
			CheckInventory("Aiming") == 0 &&
			CheckInventory("ThrowingGrenade") == 0 &&
			CheckInventory("KnifeAttack") == 0 &&
			CheckInventory("Reloading") == 0 &&
			GetActorProperty(0,APROP_Health) > 0 &&
			CheckInventory("PowerEMP") == 0			
		){
      
      // The drawing will be done at native resolution (so the crosshair sprites are never destroyed by scaling).
			SetHudSize(GetScreenWidth(),GetScreenHeight(),1);
			
			// Calculate aspect-ratio inndependent width of the screen (only a 4:3 cutout will be considered - it is enough
			// for crosshair drawing);
			int width4to3 = GetScreenHeight() * 4 / 3;

			// Calculate sizes for crosshair in normal and hold-fore state.
			// The size is adapted to current screen resolution.
			// The FOV (of 4:3 cutout of the screen) is expected to be 90.
			// The division by 16 is necessary, since the fixed point numbers have very limited capacity (1 bit for sign, 15 bits for 
			// radix part and 16 bits for fractional part), so the calculation width4to3 * weaponSpread
			// would overflow for high resolutions and hogh weapon spreads. Dividing the number by 16 effectively changes 
			// bit the distribution to 1/19/12 allowing us to store 16 times higher numbers at cost of 16 times reduced accuracy (
			// which is of course not needed for this purpose). 
			int size = width4to3 * (getCurrentWeaponSpread(false) / 16) / 90 / (65536 / 16);
			int holdSize = width4to3 * (getCurrentWeaponSpread(true) / 16) / 90 / (65536 / 16);
			
			// Use linear interpolation to get a current crosshair size.
			size = holdSize * CheckInventory("InCombatCrosshair") / 35 + size * (35 - CheckInventory("InCombatCrosshair")) / 35; 
			
			if(size > 0){
				SetFont("CROSSLFT");
				HudMessage(s:"a"; HUDMSG_FADEOUT, 314, CR_UNTRANSLATED, 65536 * (GetScreenWidth() / 2 - size), 65536 * (GetScreenHeight() / 2), 0, 0.5);
				SetFont("CROSSRGT");
				HudMessage(s:"a"; HUDMSG_FADEOUT, 315, CR_UNTRANSLATED, 65536 * (GetScreenWidth() / 2 + size), 65536 * (GetScreenHeight() / 2), 0, 0.5);
				SetFont("CROSSTOP");
				HudMessage(s:"a"; HUDMSG_FADEOUT, 316, CR_UNTRANSLATED, 65536 * (GetScreenWidth() / 2), 65536 * (GetScreenHeight() / 2 - size), 0, 0.5);
				SetFont("CROSSBOT");
				HudMessage(s:"a"; HUDMSG_FADEOUT, 317, CR_UNTRANSLATED, 65536 * (GetScreenWidth() / 2), 65536 * (GetScreenHeight() / 2 + size), 0, 0.5);
			}
			else {
				GiveInventory("InCombatCrosshair", 35);
			}
			
			TakeInventory("InCombatCrosshair", 3);
		}
		else {
			GiveInventory("InCombatCrosshair", 35);
		}
		
		for (int i = MINIMUM_TID; i < nextTid; i++ ){
			if(GetActorProperty(i,APROP_Health) <= 0){
				hudmessage(s:" "; HUDMSG_PLAIN, 20000+ i, CR_UNTRANSLATED, 0, 0, 0);
				continue;
			}
		
			
			hudMessageOnActor(i, 900 << 16, "SITREP1", "O", 45, 59);
			
			//print(s:"X ", f:-eyeCoords[0], s:" Y ", f:eyeCoords[2]);				
			
			
				//delay(10);
		}				
		
		if(loopCounter % 2 == 0 && CheckInventory("PowerEMP") > 0){
			int r = noiseCounter % 4;
		
			if(r == 0){
				SetFont("NOISE0");
			}
			else if(r==1){
				SetFont("NOISE1");
			}
			else if(r==2){
				SetFont("NOISE2");
			}
			else if(r==3){
				SetFont("NOISE3");
			} 
			
	        drawStretchedImage(10+PlayerNumber(), 1280, 800, 0.5, 1.0);
		}

		//delay(3);
		delay(1);
	}
}